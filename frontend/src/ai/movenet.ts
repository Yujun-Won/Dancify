import Webcam from "react-webcam";
import React from "react";
import { poseSimilarity } from "@ai/utils/posesim";
import { drawKeypoints, drawSkeleton } from "@ai/utilities";

import { IPoseMessages, TPoseMessage } from "@type/practice";
import { Pose as poseType } from "@type/moveNet";

import * as poseDetection from "@tensorflow-models/pose-detection";
import * as tf from "@tensorflow/tfjs";

// ÏõπÏ∫†Ïùò width, height Ï∂îÏ∂ú
export function getWebcamDims(webcam: HTMLVideoElement) {
  const webcamWidth = webcam.videoWidth;
  const webcamHeight = webcam.videoHeight;

  webcam.width = webcamWidth;
  webcam.height = webcamHeight;

  return { webcamWidth, webcamHeight };
}

// canvasÏùò ctx Ï∂îÏ∂ú
export function getCanvasCxt(
  webcamWidth: number,
  webcamHeight: number,
  canvas: HTMLCanvasElement
) {
  const ctx = canvas.getContext("2d");
  canvas.width = webcamWidth;
  canvas.height = webcamHeight;
  return ctx;
}

export function drawCanvas(pose: poseType[], ctx: CanvasRenderingContext2D) {
  //? (keypoints, confidence_score, context)
  drawKeypoints(pose[0]["keypoints"], 0.45, ctx);
  drawSkeleton(pose[0]["keypoints"], 0.45, ctx);
}

export function clearCanvas(canvas: HTMLCanvasElement) {
  const ctx = canvas.getContext("2d");
  ctx !== null && ctx.clearRect(0, 0, canvas.width, canvas.height);
}

export async function loadMoveNetDetector() {
  await tf.ready();
  const model = poseDetection.SupportedModels.MoveNet;
  const detector = await poseDetection.createDetector(model); // Î™®Îç∏ Î°úÎìú
  return detector;
}

export async function detect(
  webcam: HTMLVideoElement,
  detector: poseDetection.PoseDetector
) {
  try {
    const videoWidth = webcam.videoWidth;
    const videoHeight = webcam.videoHeight;

    // Set video width
    webcam.width = videoWidth;
    webcam.height = videoHeight;

    const pose = (await detector.estimatePoses(webcam)) as poseType[];
    // console.log(pose);
    if (pose.length > 0) return pose;
    else return "error";
  } catch (error) {
    return "error";
  }
}

export function scoreToMessage(score: number) {
  if (score < 65) {
    return "Miss";
  } else if (score >= 65 && score < 75) {
    return "Good";
  } else if (score >= 75 && score < 85) {
    return "Great";
  } else {
    return "Excellent";
  }
}

export async function danceableBodyCheck(
  webcamRef: React.RefObject<Webcam>,
  bodyCheckCallback: () => void
) {
  await tf.ready();
  const model = poseDetection.SupportedModels.MoveNet;
  const detector = await poseDetection.createDetector(model);

  const bodyCheckPerSec = setInterval(async () => {
    // ÎåÑÏÑúÎ∏îÏùò keypointsÍ∞í Ï∂îÏ∂ú
    const webcam = webcamRef.current?.video;
    const danceable = webcam && (await detect(webcam, detector));

    // Î™®Îì† Î∂ÄÏúÑÏùò confidence scoreÍ∞Ä 0.5Ïù¥ÏÉÅÏù∏ÏßÄ ÌôïÏù∏
    if (danceable !== "error") {
      const scores = danceable && danceable[0].keypoints.map((kp) => kp.score);
      // console.log(scores);
      if (scores && scores.every((score) => score >= 0.5)) {
        clearInterval(bodyCheckPerSec);
        console.log("üöÄ Ï†ÑÏã† Ï≤¥ÌÅ¨ ÏôÑÎ£å");
        bodyCheckCallback();
        return true;
      }
    }
  }, 1000);
}

export async function runMovenet(
  isForceEnd: React.MutableRefObject<boolean>,
  isSkeleton: boolean,
  webcamRef: React.RefObject<Webcam>,
  canvasRef: React.RefObject<HTMLCanvasElement>,
  detector: poseDetection.PoseDetector,
  dancerJson: poseType[][],
  setPoseMessage: React.Dispatch<React.SetStateAction<TPoseMessage>>
): Promise<
  | string
  | [avgScore: number, poseMessages: IPoseMessages, keypointJson: poseType[][]]
> {
  // Íµ¨Í∞ÑÏùò Ïã§ÏãúÍ∞Ñ ÎåÑÏÑúÎ∏î keypoint Ï†êÏàò
  const danceableJson: poseType[][] = [];

  // Íµ¨Í∞ÑÏùò ÌèâÍ∑† Ïú†ÏÇ¨ÎèÑ Ï†êÏàò
  let resultScore = 0;
  let oneSecCosineDistance = 0; // 1Ï¥à ÎèôÏïàÏùò keypoints Ïú†ÏÇ¨ÎèÑ Ï†êÏàò

  // Î∞òÎ≥µÎ¨∏ Ïã§Ìñâ
  let indx = 0;

  // Í∞ïÏ†ú Íµ¨Í∞Ñ Ï¢ÖÎ£å Ïãú canvas error Î∞©ÏßÄ
  let breakDrawing = false;

  // Í∞Å Ìè¨Ï¶àÎ≥Ñ Î©îÏÑ∏ÏßÄ Ï¥àÍ∏∞Ìôî
  const postMessages: IPoseMessages = {
    Miss: 0,
    Good: 0,
    Great: 0,
    Excellent: 0,
  };

  return new Promise((resolve) => {
    const drawPerSec = setInterval(async () => {
      //webcamÏùò video tagÎ°ú width, height Ï∂îÏ∂ú
      const webcam = webcamRef.current?.video as HTMLVideoElement;
      const { webcamWidth, webcamHeight } = webcam && getWebcamDims(webcam);

      // ÎåÑÏÑúÎ∏îÏùò keypoint Ï∂îÏ∂ú
      const danceable = await detect(webcam, detector);
      const dancer = dancerJson[indx];
      if (breakDrawing) {
        console.log("üö´ breakDrawing");
      } else {
        // canvasÏóê ÎåÑÏÑúÎ∏îÏùò Ïä§ÏºàÎ†àÌÜ§ Í∑∏Î¶¨Í∏∞
        const canvas = canvasRef.current as HTMLCanvasElement;
        if (isSkeleton) {
          const ctx = getCanvasCxt(webcamWidth, webcamHeight, canvas);
          danceable !== "error" && ctx !== null && drawCanvas(danceable, ctx);
        }

        // ÏóêÎü¨ Ïïà ÎÇòÎ©¥ x,yÏùò Ï¢åÌëúÏôÄ Ïú†ÏÇ¨ÎèÑ Ï∂úÎ†•
        if (danceable !== "error" && dancer !== undefined) {
          const cosineDistance = poseSimilarity(danceable[0], dancer[0], {
            strategy: "cosineDistance",
          });
          danceableJson.push(danceable); //ÎåÑÏÑúÎ∏î Ïã§ÏãúÍ∞Ñ keypoint Ï†ÄÏû•
          // console.log(cosineDistance);
          if (cosineDistance instanceof Error) {
            console.log(
              "üöÄ movenet.ts ~ cosineDistance: error",
              cosineDistance
            );
          } else {
            oneSecCosineDistance += cosineDistance;

            //1Ï¥à ÏßÄÎÇòÎ©¥ avgCosineDistanceÏóê ÎçîÌï¥Ï£ºÍ≥† Ï†êÏàò Î©îÏÑ∏ÏßÄ Ï∂úÎ†•Ìïú Îí§, oneSecCosineDistance Ï¥àÍ∏∞Ìôî
            if (indx % 15 === 0) {
              const poseMessage = scoreToMessage(oneSecCosineDistance / 15);
              setPoseMessage(poseMessage);
              postMessages[poseMessage] += 1; // ÎèôÏûë ÌèâÍ∞Ä Î©îÏãúÏßÄ ÎàÑÏ†Å
              oneSecCosineDistance = 0; // 1Ï¥à ÎèôÏïàÏùò Ïú†ÏÇ¨ÎèÑ Ï†êÏàò Ï¥àÍ∏∞Ìôî
            }
            // console.log('current',indx);
            indx += 1; //Îã§Ïùå Ïù¥ÎØ∏ÏßÄ ÎπÑÍµê
          }
        }

        //! -------------- Î¶¨ÌéôÌÜ†ÎßÅ ÌïÑÏöî --------------
        // Í∞ïÏ†ú Ï¢ÖÎ£å
        if (isForceEnd.current) {
          // console.log(indx);
          breakDrawing = true;
          clearInterval(drawPerSec);
          clearCanvas(canvas);
          isForceEnd.current = false;
          resolve("isForceEnd");
          // Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÎÅùÎÇòÎ©¥ setInterval Î©àÏ∂§
        } else if (indx === dancerJson.length) {
          // console.log(indx);
          breakDrawing = true;
          clearInterval(drawPerSec);
          clearCanvas(canvas);

          // Ï†êÏàò Í≥ÑÏÇ∞
          const totalcnt =
            Object.values(postMessages).reduce((sum, value) => sum + value) * 3;
          resultScore =
            Math.round(
              (10000 *
                (postMessages["Good"] +
                  postMessages["Great"] * 2 +
                  postMessages["Excellent"] * 3)) /
                totalcnt
            ) / 100;
          // console.log(resultScore, postMessages);
          resolve([resultScore, postMessages, danceableJson]);
        }
      }
    }, 1000 / 15); //! 15 fps
  });
}
